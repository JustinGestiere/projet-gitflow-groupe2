name: CI ‚Äì Fermer issues, v√©rifier changelog, nommage branches et fichiers obligatoires

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  close_issues:
    name: Fermer les issues li√©es aux commits
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©rer le code
        uses: actions/checkout@v4

      - name: Extraire le message du dernier commit
        id: extract_commit
        run: |
          echo "COMMITS=$(git log -1 --pretty=%s)" >> $GITHUB_ENV

      - name: Rechercher les r√©f√©rences d'issues
        id: find_issues
        run: |
          echo "Message du commit : ${COMMITS}"
          echo "${COMMITS}" | grep -E -o '(Fixes|Closes|Resolves) #[0-9]+' | uniq > issues.txt || true
          cat issues.txt || echo "Aucune issue d√©tect√©e"
          echo "ISSUES=$(cat issues.txt | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_ENV

      - name: Fermer automatiquement les issues
        if: env.ISSUES != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra refs <<< "${ISSUES}"
          for ref in "${refs[@]}"; do
            number=$(echo "$ref" | grep -Eo '[0-9]+')
            echo "Fermeture de l‚Äôissue #$number"
            gh issue close "$number" --repo "${GITHUB_REPOSITORY}" \
              --comment "‚úÖ Ferm√©e automatiquement par le commit [${GITHUB_SHA::7}] sur la branche \`${GITHUB_REF_NAME}\`"
          done

  verify_changelog:
    name: V√©rifier la coh√©rence entre CHANGELOG.md et les tags Git
    runs-on: ubuntu-latest
    needs: close_issues

    steps:
      - name: R√©cup√©rer le code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: V√©rifier la pr√©sence du fichier CHANGELOG.md
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ùå Le fichier CHANGELOG.md est introuvable √† la racine du d√©p√¥t."
            exit 1
          else
            echo "‚úÖ Fichier CHANGELOG.md trouv√©."
          fi

      - name: "Identifier le dernier tag Git (format attendu : vMAJOR.MINOR.PATCH)"
        id: get_tag
        run: |
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          if [[ "$last_tag" == "none" ]]; then
            echo "‚ùå Aucun tag Git n‚Äôa √©t√© trouv√© dans le d√©p√¥t."
            exit 1
          fi

          if [[ ! "$last_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Le dernier tag ($last_tag) ne respecte pas le format attendu : vMAJOR.MINOR.PATCH"
            exit 1
          fi

          echo "‚úÖ Dernier tag d√©tect√© : $last_tag"
          echo "TAG=$last_tag" >> $GITHUB_ENV

      - name: V√©rifier que le changelog mentionne la derni√®re version
        run: |
          tag="${TAG}"

          if grep -q "$tag" CHANGELOG.md; then
            echo "‚úÖ Le fichier CHANGELOG.md contient bien une section pour la version $tag."
          else
            echo "‚ùå Le fichier CHANGELOG.md ne contient pas de r√©f√©rence √† la version $tag."
            echo "üëâ Pour corriger : ajoutez une section ## $tag"
            exit 1
          fi

  check_branch_name:
    name: V√©rifier le nommage des branches Git Flow
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: V√©rifier le nom de la branche
        run: |
          branch="${GITHUB_HEAD_REF}"
          echo "Nom de la branche : $branch"

          if [[ "$branch" =~ ^feature\/.+$ ]]; then
            echo "‚úÖ Branche feature d√©tect√©e : OK"
          elif [[ "$branch" =~ ^release\/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úÖ Branche release d√©tect√©e : OK"
          elif [[ "$branch" =~ ^hotfix\/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úÖ Branche hotfix d√©tect√©e : OK"
          else
            echo "‚ùå Nom de branche invalide : $branch"
            echo "üëâ La branche doit respecter Git Flow : feature/..., release/x.y.z, hotfix/x.y.z"
            exit 1
          fi

  check_required_files:
    name: V√©rifier la pr√©sence des fichiers obligatoires
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©rer le code
        uses: actions/checkout@v4

      - name: V√©rifier README.md, CHANGELOG.md, LICENSE et CONTRIBUTING.md
        run: |
          missing_files=""
          for f in README.md CHANGELOG.md LICENSE CONTRIBUTING.md; do
            if [ ! -f "$f" ]; then
              missing_files="$missing_files $f"
            fi
          done

          if [ -n "$missing_files" ]; then
            echo "‚ùå Les fichiers suivants sont manquants :$missing_files"
            exit 1
          else
            echo "‚úÖ Tous les fichiers obligatoires sont pr√©sents."
          fi
